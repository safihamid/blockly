goog.provide('Blockly.Msg.lt_lt');
goog.require('Blockly.Msg');
Blockly.Msg.ADD_COMMENT = "Pridėkite komentarą";
Blockly.Msg.CHANGE_VALUE_TITLE = "Pakeisti reikšmę:";
Blockly.Msg.COLLAPSE_ALL = "Sulieti blokelius";
Blockly.Msg.COLLAPSE_BLOCK = "Sumažinti bloką";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "1 spalva";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "2 spalva";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "santykis";
Blockly.Msg.COLOUR_BLEND_TITLE = "sumaišyti";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Sumaišo dvi spalvas pagal duotą santykį (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "http://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Pasirinkti spalvą iš paletės.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "Atsitiktinė spalva";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Pasirinkti atsitiktinę spalvą.";
Blockly.Msg.COLOUR_RGB_BLUE = "mėlyna";
Blockly.Msg.COLOUR_RGB_GREEN = "žalia spalva";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "raudona spalva";
Blockly.Msg.COLOUR_RGB_TITLE = "spalvinti su";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Sukurkite spalvą su pasirinktu kiekiu raudonos, žalios bei mėlynos spalvos. Visos reikšmės turi būti tarp 0 ir 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#Loop_Termination_Blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "nutraukti ciklą";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "pratęsti kitą ciklo pakartojimą";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Nutraukti kartojimą.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Praleisti likusias komandas šįkart, ir toliau vykdyti ciklą.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Įspėjimas: Šis blokas gali būti panaudotas tik ciklo/kartojimo ribose.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#for_each";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "iš";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "kartok su kiekvienu";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Kartoti veiksmus su kiekvienu sąrašo elementu, priskirtu kintamajam \"%1\".";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#count_with";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "kinta nuo %1 iki %2 po %3";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "kartok, kai";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Kartoti veiksmus, kai kintamasis %1 gauna reikšmes nuo [pradinės] iki [galutinės], didinant po [žingsnį].";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Pridėkite sąlygą prie „jei“ bloko.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Pridėkite paskutinę, viską sutraukiančią sąlygą į if bloką.";
Blockly.Msg.CONTROLS_IF_HELPURL = "http://code.google.com/p/blockly/wiki/If_Then";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Pridėkite, pašalinkite arba pakeiskite skyrių tvarką, norėdami pertvarkyti šį if bloką.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "kitu atveju";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "o jei";
Blockly.Msg.CONTROLS_IF_MSG_IF = "jei";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Jeigu sąlyga tenkinama, tai atlik veiksmus.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Jei sąlyga tenkinama, atlikti jai priklausančius veiksmus,\no jei ne -- atlikti kitus nurodytus veiksmus.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Jei pirma sąlyga tenkinama, atlikti jai priklausančius veiksmus,\nO jei ne, tikrinti antrą sąlygą -- ir jei ši tenkinama, atlikti jos veiksmus.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Jei pirma sąlyga tenkinama, atlikti jai priklausančius veiksmus,\nO jei ne, tikrinti antrą sąlygą -- ir jei ši tenkinama, atlikti jos veiksmus.\nKitais atvejais -- atlikti paskutinio bloko veiksmus.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "http://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "daryk";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "kartoti %1 kartus";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "kartok";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "kart";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Įvykdyti komandas kelis kartus.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "http://code.google.com/p/blockly/wiki/Repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "kartok kol pasidarys";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "kartok kol yra";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Kartoti, kol sąlyga taps patenkinta.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Kol sąlyga yra tenkinama, kartoti veiksmus.";
Blockly.Msg.DELETE_BLOCK = "Panaikinti bloką";
Blockly.Msg.DELETE_X_BLOCKS = "Ištrinti %1 bloką/us";
Blockly.Msg.DISABLE_BLOCK = "Išjungti bloką";
Blockly.Msg.DUPLICATE_BLOCK = "Dubliuoti";
Blockly.Msg.ENABLE_BLOCK = "Įjungti bloką";
Blockly.Msg.EXPAND_ALL = "Išskleisti blokus";
Blockly.Msg.EXPAND_BLOCK = "Išskleisti bloką";
Blockly.Msg.EXTERNAL_INPUTS = "Išdėstyti stulpeliu, kai daug parametrų";
Blockly.Msg.HELP = "pagalba";
Blockly.Msg.INLINE_INPUTS = "Išdėstyti vienoje eilutėje";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "http://en.wikipedia.org/wiki/Linked_list#Empty_lists";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "Sukurti tuščią sąrašą";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Duoda tuščią sąrašą";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "sąrašas";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Pridėkite, pašalinkite arba pakeiskite savo skyrius.";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "sukurti sąrašą:";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Įtraukti elementą į sąrašą.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Sukurti sąrašą su bet kokiu elementų skaičiumi.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "pirmasis";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# nuo galo";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "paimk";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "paimk ir ištrink";
Blockly.Msg.LISTS_GET_INDEX_LAST = "paskutinis";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "atsitiktinis";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "ištrink";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Paima pirmąjį sąrašo elementą.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Paima sąrašo elementą, kurio numeris nurodytas. #1 yra paskutinis elementas.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Paima sąrašo elementą, kurio numeris nurodytas. #1 yra pirmas elementas.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Paima paskutinį sąrašo elementą.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Paima atsitiktinį sąrašo elementą.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Paima ir ištrina iš sąrašo pirmą elementą.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Paima ir ištrina sąrašo elementą, kurio numeris nurodytas. #1 yra paskutinis elementas.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Paima ir ištrina sąrašo elementą, kurio numeris nurodytas. #1 yra pirmas elementas.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Paima ir ištrina paskutinį sąrašo elementą.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Paima ir ištrina iš sąrašo atsitiktinį elementą.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Ištrina pirmą sąrašo elementą.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Ištrina sąrašo elementą, kurio numeris nurodytas. #1 yra paskutinis elementas.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Ištrina sąrašo elementą, kurio numeris nurodytas. #1 yra pirmas elementas.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Ištrina paskutinį sąrašo elementą.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Ištrina atsitiktinį sąrašo elementą.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "iki # nuo galo";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "iki #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "iki paskutinio";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_a_sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "sąrašo dalis nuo pirmo";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "sąrašo dalis nuo # nuo galo";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "sąrašo dalis nuo #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "rask pirmą reikšmę";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_Items_from_a_List";
Blockly.Msg.LISTS_INDEX_OF_LAST = "rask paskutinę reikšmę";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list.  Returns 0 if text is not found.";
Blockly.Msg.LISTS_INLIST = "sąraše";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#is_empty";
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 yra tuščias";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#length_of";
Blockly.Msg.LISTS_LENGTH_TITLE = "%1 ilgis";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Duoda sąrašo ilgį.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#create_list_with";
Blockly.Msg.LISTS_REPEAT_TITLE = "sukurk sąrašą, pakartodamas %1 %2 kart";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#in_list_..._set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "kaip";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "Įterpk į";
Blockly.Msg.LISTS_SET_INDEX_SET = "priskirk";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Įterpia reikšmę sąrašo pradžioje.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list.  #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list.  #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Prideda elementą sąrašo gale.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Priskiria reikšmę pirmajam sąrašo elementui.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list.  #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list.  #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
Blockly.Msg.LISTS_TOOLTIP = "Returns true if the list is empty.";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "Ne";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "http://code.google.com/p/blockly/wiki/True_False";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "Taip";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "http://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "http://code.google.com/p/blockly/wiki/Not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "ne %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false.  Returns false if the input is true.";
Blockly.Msg.LOGIC_NULL = "nieko";
Blockly.Msg.LOGIC_NULL_HELPURL = "http://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
Blockly.Msg.LOGIC_OPERATION_AND = "ir";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "http://code.google.com/p/blockly/wiki/And_Or";
Blockly.Msg.LOGIC_OPERATION_OR = "arba";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Bus teisinga, kai abi sąlygos bus tenkinamos.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Bus teisinga, kai bent viena sąlyga bus tenkinama.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "sąlyga";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "http://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "jeigu ne";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "jei taip";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "http://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Atlieka dalybą ir duoda dalmenį.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
Blockly.Msg.MATH_CHANGE_HELPURL = "http://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_INPUT_BY = "po";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "pridėk prie";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Padidina kintamojo '%1' reikšmę (jei norime sumažinti, reikia pridėt su minuso ženklu).";
Blockly.Msg.MATH_CONSTANT_HELPURL = "http://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "http://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "apribok %1 tarp %2 ir %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "dalinasi iš";
Blockly.Msg.MATH_IS_EVEN = "yra lyginis";
Blockly.Msg.MATH_IS_NEGATIVE = "yra neigiamas";
Blockly.Msg.MATH_IS_ODD = "yra nelyginis";
Blockly.Msg.MATH_IS_POSITIVE = "yra teigiamas";
Blockly.Msg.MATH_IS_PRIME = "yra pirminis";
Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number.  Returns true or false.";
Blockly.Msg.MATH_IS_WHOLE = "yra sveikasis";
Blockly.Msg.MATH_MODULO_HELPURL = "http://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "dalybos liekana %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "http://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "A number.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "vidurkis";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "didžiausia reikšmė";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "mažiausia reikšmė sąraše";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "sąrašo statistinė moda";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "atsitiktinis sąrašo elementas";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standartinis nuokrypis";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "suma";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "http://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "http://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "http://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "suapvalink";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "suapvalink žemyn";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "suapvalink aukštyn";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";
Blockly.Msg.MATH_SINGLE_HELPURL = "http://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "modulis";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "kvadratinė šaknis";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Pakelti e (eksponentę) laipsniu.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Pakelti 10 laipsniu.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "arccos";
Blockly.Msg.MATH_TRIG_ASIN = "arcsin";
Blockly.Msg.MATH_TRIG_ATAN = "arctg";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "http://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "nuodėmės";
Blockly.Msg.MATH_TRIG_TAN = "tg";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
Blockly.Msg.NEW_VARIABLE = "Naujas kintamasis...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Naujas kintamojo vardas:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "pagal:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "http://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "http://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
Blockly.Msg.PROCEDURES_CREATE_DO = "Sukurti '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "http://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "kažką daryk";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "Komanda:";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "http://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "grąžink";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "Parametro pavadinimas:";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "parametrai";
Blockly.Msg.REMOVE_COMMENT = "Pašalinti komentarą";
Blockly.Msg.RENAME_VARIABLE = "Pervadinti kintamąjį...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Pervadink visus '%1' kintamuosius į:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "pridėk tekstą";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_APPEND_TO = "prie";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Adjusting_text_case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "mažosiom raidėmis";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "pavadinimo Raidėmis";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "didžiosiom RAIDĖMIS";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "pirma raidė";
Blockly.Msg.TEXT_CHARAT_FROM_END = "raidė # nuo galo";
Blockly.Msg.TEXT_CHARAT_FROM_START = "raidė #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "tekste";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Įtraukti elementą į tekstą.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "sujungti";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "iki raidės #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "iki teksto pabaigos";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "http://code.google.com/p/blockly/wiki/Text#Extracting_a_region_of_text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "tekste";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "paimk tekto dalį nuo pradžios";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "paimk teksto dalį nuo raidės # nuo galo";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "paim teksto dalį nuo raidės #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Finding_text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "tekste";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "rask, kur yra pirmasis";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "rask, kur yra paskutinis";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of first text in the second text.  Returns 0 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Checking_for_empty_text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "'%1' yra tuščias";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "sujunk tekstus";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "%1 ilgis";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Printing_text";
Blockly.Msg.TEXT_PRINT_TITLE = "parašyk %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Getting_input_from_the_user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "paklausk (kad įvestų skaičių)";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "paklausk (kad įvestų tekstą)";
Blockly.Msg.TEXT_TEXT_HELPURL = "http://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Trimming_%28removing%29_spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "ištrink tarpus iš abiejų pusių";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "ištrink tarpus teksto kairėje";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "ištrink tarpus teksto dešinėje";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "elementas";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Sukurti priskyrimą '%1 = '";
Blockly.Msg.VARIABLES_GET_HELPURL = "http://code.google.com/p/blockly/wiki/Variables#Get";
Blockly.Msg.VARIABLES_GET_TAIL = "";
Blockly.Msg.VARIABLES_GET_TITLE = "";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Paima kintamojo reikšmę.";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Sukurti kintamąjį '%1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "http://code.google.com/p/blockly/wiki/Variables#Set";
Blockly.Msg.VARIABLES_SET_TAIL = "=";
Blockly.Msg.VARIABLES_SET_TITLE = " ";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Priskiria kintamajam nurodytą reikšmę.";
